// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2ray.com/core/app/router/config.proto

package com.v2ray.core.app.router;

/**
 * Protobuf type {@code v2ray.core.app.router.Config}
 */
public final class Config extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:v2ray.core.app.router.Config)
        ConfigOrBuilder {
    private static final long serialVersionUID = 0L;

    // Use Config.newBuilder() to construct.
    private Config(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private Config() {
        domainStrategy_ = 0;
        rule_ = java.util.Collections.emptyList();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
        return this.unknownFields;
    }

    private Config(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
            throw new NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
                com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    case 8: {
                        int rawValue = input.readEnum();

                        domainStrategy_ = rawValue;
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                            rule_ = new java.util.ArrayList<RoutingRule>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        rule_.add(
                                input.readMessage(RoutingRule.parser(), extensionRegistry));
                        break;
                    }
                    default: {
                        if (!parseUnknownField(
                                input, unknownFields, extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                }
            }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                    e).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) != 0)) {
                rule_ = java.util.Collections.unmodifiableList(rule_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
        }
    }

    public static final com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return ConfigOuterClass.internal_static_v2ray_core_app_router_Config_descriptor;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
        return ConfigOuterClass.internal_static_v2ray_core_app_router_Config_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        Config.class, Builder.class);
    }

    /**
     * Protobuf enum {@code v2ray.core.app.router.Config.DomainStrategy}
     */
    public enum DomainStrategy
            implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <pre>
         * Use domain as is.
         * </pre>
         *
         * <code>AsIs = 0;</code>
         */
        AsIs(0),
        /**
         * <pre>
         * Always resolve IP for domains.
         * </pre>
         *
         * <code>UseIp = 1;</code>
         */
        UseIp(1),
        /**
         * <pre>
         * Resolve to IP if the domain doesn't match any rules.
         * </pre>
         *
         * <code>IpIfNonMatch = 2;</code>
         */
        IpIfNonMatch(2),
        /**
         * <pre>
         * Resolve to IP if any rule requires IP matching.
         * </pre>
         *
         * <code>IpOnDemand = 3;</code>
         */
        IpOnDemand(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <pre>
         * Use domain as is.
         * </pre>
         *
         * <code>AsIs = 0;</code>
         */
        public static final int AsIs_VALUE = 0;
        /**
         * <pre>
         * Always resolve IP for domains.
         * </pre>
         *
         * <code>UseIp = 1;</code>
         */
        public static final int UseIp_VALUE = 1;
        /**
         * <pre>
         * Resolve to IP if the domain doesn't match any rules.
         * </pre>
         *
         * <code>IpIfNonMatch = 2;</code>
         */
        public static final int IpIfNonMatch_VALUE = 2;
        /**
         * <pre>
         * Resolve to IP if any rule requires IP matching.
         * </pre>
         *
         * <code>IpOnDemand = 3;</code>
         */
        public static final int IpOnDemand_VALUE = 3;


        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new IllegalArgumentException(
                        "Can't get the number of an unknown enum value.");
            }
            return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @Deprecated
        public static DomainStrategy valueOf(int value) {
            return forNumber(value);
        }

        public static DomainStrategy forNumber(int value) {
            switch (value) {
                case 0:
                    return AsIs;
                case 1:
                    return UseIp;
                case 2:
                    return IpIfNonMatch;
                case 3:
                    return IpOnDemand;
                default:
                    return null;
            }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<DomainStrategy>
        internalGetValueMap() {
            return internalValueMap;
        }

        private static final com.google.protobuf.Internal.EnumLiteMap<
                DomainStrategy> internalValueMap =
                new com.google.protobuf.Internal.EnumLiteMap<DomainStrategy>() {
                    public DomainStrategy findValueByNumber(int number) {
                        return DomainStrategy.forNumber(number);
                    }
                };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
            return getDescriptor().getValues().get(ordinal());
        }

        public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
            return getDescriptor();
        }

        public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
            return Config.getDescriptor().getEnumTypes().get(0);
        }

        private static final DomainStrategy[] VALUES = values();

        public static DomainStrategy valueOf(
                com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException(
                        "EnumValueDescriptor is not for this type.");
            }
            if (desc.getIndex() == -1) {
                return UNRECOGNIZED;
            }
            return VALUES[desc.getIndex()];
        }

        private final int value;

        private DomainStrategy(int value) {
            this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:v2ray.core.app.router.Config.DomainStrategy)
    }

    private int bitField0_;
    public static final int DOMAIN_STRATEGY_FIELD_NUMBER = 1;
    private int domainStrategy_;

    /**
     * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
     */
    public int getDomainStrategyValue() {
        return domainStrategy_;
    }

    /**
     * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
     */
    public DomainStrategy getDomainStrategy() {
        @SuppressWarnings("deprecation")
        DomainStrategy result = DomainStrategy.valueOf(domainStrategy_);
        return result == null ? DomainStrategy.UNRECOGNIZED : result;
    }

    public static final int RULE_FIELD_NUMBER = 2;
    private java.util.List<RoutingRule> rule_;

    /**
     * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
     */
    public java.util.List<RoutingRule> getRuleList() {
        return rule_;
    }

    /**
     * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
     */
    public java.util.List<? extends RoutingRuleOrBuilder>
    getRuleOrBuilderList() {
        return rule_;
    }

    /**
     * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
     */
    public int getRuleCount() {
        return rule_.size();
    }

    /**
     * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
     */
    public RoutingRule getRule(int index) {
        return rule_.get(index);
    }

    /**
     * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
     */
    public RoutingRuleOrBuilder getRuleOrBuilder(
            int index) {
        return rule_.get(index);
    }

    private byte memoizedIsInitialized = -1;

    @Override
    public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (domainStrategy_ != DomainStrategy.AsIs.getNumber()) {
            output.writeEnum(1, domainStrategy_);
        }
        for (int i = 0; i < rule_.size(); i++) {
            output.writeMessage(2, rule_.get(i));
        }
        unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (domainStrategy_ != DomainStrategy.AsIs.getNumber()) {
            size += com.google.protobuf.CodedOutputStream
                    .computeEnumSize(1, domainStrategy_);
        }
        for (int i = 0; i < rule_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(2, rule_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Config)) {
            return super.equals(obj);
        }
        Config other = (Config) obj;

        if (domainStrategy_ != other.domainStrategy_) return false;
        if (!getRuleList()
                .equals(other.getRuleList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + DOMAIN_STRATEGY_FIELD_NUMBER;
        hash = (53 * hash) + domainStrategy_;
        if (getRuleCount() > 0) {
            hash = (37 * hash) + RULE_FIELD_NUMBER;
            hash = (53 * hash) + getRuleList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    public static Config parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Config parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Config parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Config parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Config parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static Config parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static Config parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static Config parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Config parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static Config parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static Config parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static Config parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(Config prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
            BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    /**
     * Protobuf type {@code v2ray.core.app.router.Config}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:v2ray.core.app.router.Config)
            ConfigOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return ConfigOuterClass.internal_static_v2ray_core_app_router_Config_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return ConfigOuterClass.internal_static_v2ray_core_app_router_Config_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            Config.class, Builder.class);
        }

        // Construct using com.v2ray.core.app.router.Config.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private Builder(
                BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
                getRuleFieldBuilder();
            }
        }

        @Override
        public Builder clear() {
            super.clear();
            domainStrategy_ = 0;

            if (ruleBuilder_ == null) {
                rule_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
            } else {
                ruleBuilder_.clear();
            }
            return this;
        }

        @Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return ConfigOuterClass.internal_static_v2ray_core_app_router_Config_descriptor;
        }

        @Override
        public Config getDefaultInstanceForType() {
            return Config.getDefaultInstance();
        }

        @Override
        public Config build() {
            Config result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public Config buildPartial() {
            Config result = new Config(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            result.domainStrategy_ = domainStrategy_;
            if (ruleBuilder_ == null) {
                if (((bitField0_ & 0x00000002) != 0)) {
                    rule_ = java.util.Collections.unmodifiableList(rule_);
                    bitField0_ = (bitField0_ & ~0x00000002);
                }
                result.rule_ = rule_;
            } else {
                result.rule_ = ruleBuilder_.build();
            }
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof Config) {
                return mergeFrom((Config) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(Config other) {
            if (other == Config.getDefaultInstance()) return this;
            if (other.domainStrategy_ != 0) {
                setDomainStrategyValue(other.getDomainStrategyValue());
            }
            if (ruleBuilder_ == null) {
                if (!other.rule_.isEmpty()) {
                    if (rule_.isEmpty()) {
                        rule_ = other.rule_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                    } else {
                        ensureRuleIsMutable();
                        rule_.addAll(other.rule_);
                    }
                    onChanged();
                }
            } else {
                if (!other.rule_.isEmpty()) {
                    if (ruleBuilder_.isEmpty()) {
                        ruleBuilder_.dispose();
                        ruleBuilder_ = null;
                        rule_ = other.rule_;
                        bitField0_ = (bitField0_ & ~0x00000002);
                        ruleBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getRuleFieldBuilder() : null;
                    } else {
                        ruleBuilder_.addAllMessages(other.rule_);
                    }
                }
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
        }

        @Override
        public final boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            Config parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                parsedMessage = (Config) e.getUnfinishedMessage();
                throw e.unwrapIOException();
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private int bitField0_;

        private int domainStrategy_ = 0;

        /**
         * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
         */
        public int getDomainStrategyValue() {
            return domainStrategy_;
        }

        /**
         * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
         */
        public Builder setDomainStrategyValue(int value) {
            domainStrategy_ = value;
            onChanged();
            return this;
        }

        /**
         * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
         */
        public DomainStrategy getDomainStrategy() {
            @SuppressWarnings("deprecation")
            DomainStrategy result = DomainStrategy.valueOf(domainStrategy_);
            return result == null ? DomainStrategy.UNRECOGNIZED : result;
        }

        /**
         * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
         */
        public Builder setDomainStrategy(DomainStrategy value) {
            if (value == null) {
                throw new NullPointerException();
            }

            domainStrategy_ = value.getNumber();
            onChanged();
            return this;
        }

        /**
         * <code>.v2ray.core.app.router.Config.DomainStrategy domain_strategy = 1;</code>
         */
        public Builder clearDomainStrategy() {

            domainStrategy_ = 0;
            onChanged();
            return this;
        }

        private java.util.List<RoutingRule> rule_ =
                java.util.Collections.emptyList();

        private void ensureRuleIsMutable() {
            if (!((bitField0_ & 0x00000002) != 0)) {
                rule_ = new java.util.ArrayList<RoutingRule>(rule_);
                bitField0_ |= 0x00000002;
            }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                RoutingRule, RoutingRule.Builder, RoutingRuleOrBuilder> ruleBuilder_;

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public java.util.List<RoutingRule> getRuleList() {
            if (ruleBuilder_ == null) {
                return java.util.Collections.unmodifiableList(rule_);
            } else {
                return ruleBuilder_.getMessageList();
            }
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public int getRuleCount() {
            if (ruleBuilder_ == null) {
                return rule_.size();
            } else {
                return ruleBuilder_.getCount();
            }
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public RoutingRule getRule(int index) {
            if (ruleBuilder_ == null) {
                return rule_.get(index);
            } else {
                return ruleBuilder_.getMessage(index);
            }
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder setRule(
                int index, RoutingRule value) {
            if (ruleBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureRuleIsMutable();
                rule_.set(index, value);
                onChanged();
            } else {
                ruleBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder setRule(
                int index, RoutingRule.Builder builderForValue) {
            if (ruleBuilder_ == null) {
                ensureRuleIsMutable();
                rule_.set(index, builderForValue.build());
                onChanged();
            } else {
                ruleBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder addRule(RoutingRule value) {
            if (ruleBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureRuleIsMutable();
                rule_.add(value);
                onChanged();
            } else {
                ruleBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder addRule(
                int index, RoutingRule value) {
            if (ruleBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureRuleIsMutable();
                rule_.add(index, value);
                onChanged();
            } else {
                ruleBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder addRule(
                RoutingRule.Builder builderForValue) {
            if (ruleBuilder_ == null) {
                ensureRuleIsMutable();
                rule_.add(builderForValue.build());
                onChanged();
            } else {
                ruleBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder addRule(
                int index, RoutingRule.Builder builderForValue) {
            if (ruleBuilder_ == null) {
                ensureRuleIsMutable();
                rule_.add(index, builderForValue.build());
                onChanged();
            } else {
                ruleBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder addAllRule(
                Iterable<? extends RoutingRule> values) {
            if (ruleBuilder_ == null) {
                ensureRuleIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, rule_);
                onChanged();
            } else {
                ruleBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder clearRule() {
            if (ruleBuilder_ == null) {
                rule_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000002);
                onChanged();
            } else {
                ruleBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public Builder removeRule(int index) {
            if (ruleBuilder_ == null) {
                ensureRuleIsMutable();
                rule_.remove(index);
                onChanged();
            } else {
                ruleBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public RoutingRule.Builder getRuleBuilder(
                int index) {
            return getRuleFieldBuilder().getBuilder(index);
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public RoutingRuleOrBuilder getRuleOrBuilder(
                int index) {
            if (ruleBuilder_ == null) {
                return rule_.get(index);
            } else {
                return ruleBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public java.util.List<? extends RoutingRuleOrBuilder>
        getRuleOrBuilderList() {
            if (ruleBuilder_ != null) {
                return ruleBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(rule_);
            }
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public RoutingRule.Builder addRuleBuilder() {
            return getRuleFieldBuilder().addBuilder(
                    RoutingRule.getDefaultInstance());
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public RoutingRule.Builder addRuleBuilder(
                int index) {
            return getRuleFieldBuilder().addBuilder(
                    index, RoutingRule.getDefaultInstance());
        }

        /**
         * <code>repeated .v2ray.core.app.router.RoutingRule rule = 2;</code>
         */
        public java.util.List<RoutingRule.Builder>
        getRuleBuilderList() {
            return getRuleFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                RoutingRule, RoutingRule.Builder, RoutingRuleOrBuilder>
        getRuleFieldBuilder() {
            if (ruleBuilder_ == null) {
                ruleBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        RoutingRule, RoutingRule.Builder, RoutingRuleOrBuilder>(
                        rule_,
                        ((bitField0_ & 0x00000002) != 0),
                        getParentForChildren(),
                        isClean());
                rule_ = null;
            }
            return ruleBuilder_;
        }

        @Override
        public final Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public final Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:v2ray.core.app.router.Config)
    }

    // @@protoc_insertion_point(class_scope:v2ray.core.app.router.Config)
    private static final Config DEFAULT_INSTANCE;

    static {
        DEFAULT_INSTANCE = new Config();
    }

    public static Config getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Config>
            PARSER = new com.google.protobuf.AbstractParser<Config>() {
        @Override
        public Config parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            return new Config(input, extensionRegistry);
        }
    };

    public static com.google.protobuf.Parser<Config> parser() {
        return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Config> getParserForType() {
        return PARSER;
    }

    @Override
    public Config getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

}

