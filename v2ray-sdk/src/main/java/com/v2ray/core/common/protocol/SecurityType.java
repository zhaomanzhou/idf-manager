// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: v2ray.com/core/common/protocol/headers.proto

package com.v2ray.core.common.protocol;

/**
 * Protobuf enum {@code v2ray.core.common.protocol.SecurityType}
 */
public enum SecurityType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNKNOWN = 0;</code>
   */
  UNKNOWN(0),
  /**
   * <code>LEGACY = 1;</code>
   */
  LEGACY(1),
  /**
   * <code>AUTO = 2;</code>
   */
  AUTO(2),
  /**
   * <code>AES128_GCM = 3;</code>
   */
  AES128_GCM(3),
  /**
   * <code>CHACHA20_POLY1305 = 4;</code>
   */
  CHACHA20_POLY1305(4),
  /**
   * <code>NONE = 5;</code>
   */
  NONE(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNKNOWN = 0;</code>
   */
  public static final int UNKNOWN_VALUE = 0;
  /**
   * <code>LEGACY = 1;</code>
   */
  public static final int LEGACY_VALUE = 1;
  /**
   * <code>AUTO = 2;</code>
   */
  public static final int AUTO_VALUE = 2;
  /**
   * <code>AES128_GCM = 3;</code>
   */
  public static final int AES128_GCM_VALUE = 3;
  /**
   * <code>CHACHA20_POLY1305 = 4;</code>
   */
  public static final int CHACHA20_POLY1305_VALUE = 4;
  /**
   * <code>NONE = 5;</code>
   */
  public static final int NONE_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static SecurityType valueOf(int value) {
    return forNumber(value);
  }

  public static SecurityType forNumber(int value) {
    switch (value) {
      case 0: return UNKNOWN;
      case 1: return LEGACY;
      case 2: return AUTO;
      case 3: return AES128_GCM;
      case 4: return CHACHA20_POLY1305;
      case 5: return NONE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SecurityType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SecurityType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SecurityType>() {
          public SecurityType findValueByNumber(int number) {
            return SecurityType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return Headers.getDescriptor().getEnumTypes().get(0);
  }

  private static final SecurityType[] VALUES = values();

  public static SecurityType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SecurityType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:v2ray.core.common.protocol.SecurityType)
}

