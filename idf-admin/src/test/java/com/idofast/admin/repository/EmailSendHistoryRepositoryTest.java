package com.idofast.admin.repository;

import com.idofast.admin.domain.EmailSendHistory;
import com.idofast.common.enums.EmailTypeEnum;
import com.mysql.cj.util.Base64Decoder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;


@SpringBootTest
@RunWith(SpringJUnit4ClassRunner.class)
public class EmailSendHistoryRepositoryTest
{

    @Autowired
    private EmailSendHistoryRepository emailSendHistoryRepository;

    @Test
    public void testInsert()
    {
        EmailSendHistory history = new EmailSendHistory();
        history.setContent("23434");
        history.setEmailTypeEnum(EmailTypeEnum.REGISTER_VCODE);
        history.setReceiver("271832284@qq.com");
        emailSendHistoryRepository.save(history);
    }



    @Test
    public void test2()
    {
        String s = "dm1lc3M6Ly9leUpoWkdRaU9pSm9hM1pwY0M1cFpHOW1ZWE4wTG1OdmJTSXNJbUZwWkNJNklqWTBJaXdpYUc5emRDSTZJaUlzSW1sa0lqb2laVGMwTkRNMk4yTXRNV1V6TUMwME9XSmlMVGsyWlRFdFpXUTRNR0kzTVRnNE56VXlJaXdpYm1WMElqb2lkM01pTENKd1lYUm9Jam9pTDNkekx6STNiV2x4WW1vNlptUTFNak0wTW1NeE9UZzJNamt6TldGbVptUXpaVEZoTWpBME5qSmhZamd2SWl3aWNHOXlkQ0k2SWpRME15SXNJbkJ6SWpvaTZhYVo1cml2NTdxLzZMZXZNQzNucDd2b2daVG5sTFV0NW82bzZJMlFJaXdpZEd4eklqb2lkR3h6SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSjkKdm1lc3M6Ly9leUpoWkdRaU9pSnBaRzltWVhOMExtTnZiU0lzSW1GcFpDSTZJalkwSWl3aWFHOXpkQ0k2SWlJc0ltbGtJam9pWlRjME5ETTJOMk10TVdVek1DMDBPV0ppTFRrMlpURXRaV1E0TUdJM01UZzROelV5SWl3aWJtVjBJam9pZDNNaUxDSndZWFJvSWpvaUwzZHpMekkzYldseFltbzZPVFl6TVRJMVlqRm1PRFJpTmpKaVlUWTJObUUyWWpjME5EWmpOVEEwTWpVdklpd2ljRzl5ZENJNklqUTBNeUlzSW5Ceklqb2k2YWFaNXJpdjU3cS82TGV2TVMxaGVTSXNJblJzY3lJNkluUnNjeUlzSW5SNWNHVWlPaUp1YjI1bElpd2lkaUk2SWpJaWZRPT0Kdm1lc3M6Ly9leUpoWkdRaU9pSjBlQzVwWkc5bVlYTjBMbU52YlNJc0ltRnBaQ0k2SWpZMElpd2lhRzl6ZENJNklpSXNJbWxrSWpvaVpUYzBORE0yTjJNdE1XVXpNQzAwT1dKaUxUazJaVEV0WldRNE1HSTNNVGc0TnpVeUlpd2libVYwSWpvaWQzTWlMQ0p3WVhSb0lqb2lMM2R6THpJM2JXbHhZbW82T1dKbFpqSmxOR1kyT1dVeE16Y3dPVEJoTm1Rd1pERmxaRFF5TlRGa1l6a3ZJaXdpY0c5eWRDSTZJalEwTXlJc0luQnpJam9pNmFhWjVyaXY1N3EvNkxldk1pMTBlU0lzSW5Sc2N5STZJblJzY3lJc0luUjVjR1VpT2lKdWIyNWxJaXdpZGlJNklqSWlmUT09CnZtZXNzOi8vZXlKaFpHUWlPaUpvYXpFdWFXUnZabUZ6ZEM1amIyMGlMQ0poYVdRaU9pSTJOQ0lzSW1odmMzUWlPaUlpTENKcFpDSTZJbVUzTkRRek5qZGpMVEZsTXpBdE5EbGlZaTA1Tm1VeExXVmtPREJpTnpFNE9EYzFNaUlzSW01bGRDSTZJbmR6SWl3aWNHRjBhQ0k2SWk5M2N5OHlOMjFwY1dKcU9qQmlZV00yTTJKbVlXSTFNbUk1Tmpoa09XUTNabUkwTm1JMlpXTTFNVGt3THlJc0luQnZjblFpT2lJME5ETWlMQ0p3Y3lJNkl1bW1tZWE0citlNnYraTNyek10WVhraUxDSjBiSE1pT2lKMGJITWlMQ0owZVhCbElqb2libTl1WlNJc0luWWlPaUl5SW4wPQp2bWVzczovL2V5SmhaR1FpT2lKb2F6SXVhV1J2Wm1GemRDNWpiMjBpTENKaGFXUWlPaUkyTkNJc0ltaHZjM1FpT2lJaUxDSnBaQ0k2SW1VM05EUXpOamRqTFRGbE16QXRORGxpWWkwNU5tVXhMV1ZrT0RCaU56RTRPRGMxTWlJc0ltNWxkQ0k2SW5keklpd2ljR0YwYUNJNklpOTNjeTh5TjIxcGNXSnFPakppTWpJeE16TmhZV016WlRRNVlUQXlaVFZqWWpkaFlqQTNNREZqTkRReUx5SXNJbkJ2Y25RaU9pSTBORE1pTENKd2N5STZJdW1tbWVhNHIrZTZ2K2kzcnpRdDZLZUc2YUtSNW82bzZJMlFJaXdpZEd4eklqb2lkR3h6SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSjkKdm1lc3M6Ly9leUpoWkdRaU9pSm9helV1YVdSdlptRnpkQzVqYjIwaUxDSmhhV1FpT2lJMk5DSXNJbWh2YzNRaU9pSWlMQ0pwWkNJNkltVTNORFF6TmpkakxURmxNekF0TkRsaVlpMDVObVV4TFdWa09EQmlOekU0T0RjMU1pSXNJbTVsZENJNkluZHpJaXdpY0dGMGFDSTZJaTkzY3k4eU4yMXBjV0pxT2pjeVpHVTVOelJpWVRjMU5qWXhZakUwWm1Ka1pqZGhaalZpWlRnNE9HTXlMeUlzSW5CdmNuUWlPaUkwTkRNaUxDSndjeUk2SXVtbW1lYTRyK2U2ditpM3J6VXQ1NmU3NklHVTU1UzFJaXdpZEd4eklqb2lkR3h6SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSjkKdm1lc3M6Ly9leUpoWkdRaU9pSnJjakV1YVdSdlptRnpkQzVqYjIwaUxDSmhhV1FpT2lJMk5DSXNJbWh2YzNRaU9pSWlMQ0pwWkNJNkltVTNORFF6TmpkakxURmxNekF0TkRsaVlpMDVObVV4TFdWa09EQmlOekU0T0RjMU1pSXNJbTVsZENJNkluZHpJaXdpY0dGMGFDSTZJaTkzY3k4eU4yMXBjV0pxT2pNNU1tTTJOREUzWVdFeE1UUTJaR1k0TkdVMVpqWXpNek0wWVROaU1XSmtMeUlzSW5CdmNuUWlPaUkwTkRNaUxDSndjeUk2SXVtZnFlV2J2ZWU2ditpM3J6RWlMQ0owYkhNaU9pSjBiSE1pTENKMGVYQmxJam9pYm05dVpTSXNJbllpT2lJeUluMD0Kdm1lc3M6Ly9leUpoWkdRaU9pSnJjakl1YVdSdlptRnpkQzVqYjIwaUxDSmhhV1FpT2lJMk5DSXNJbWh2YzNRaU9pSWlMQ0pwWkNJNkltVTNORFF6TmpkakxURmxNekF0TkRsaVlpMDVObVV4TFdWa09EQmlOekU0T0RjMU1pSXNJbTVsZENJNkluZHpJaXdpY0dGMGFDSTZJaTkzY3k4eU4yMXBjV0pxT21Fd05qazFNbVkyTmpabE1qZ3dNalZsWW1RMU1HVmtNamM0TmpGaFlUazVMeUlzSW5CdmNuUWlPaUkwTkRNaUxDSndjeUk2SXVtZnFlV2J2ZWU2ditpM3J6SWlMQ0owYkhNaU9pSjBiSE1pTENKMGVYQmxJam9pYm05dVpTSXNJbllpT2lJeUluMD0Kdm1lc3M6Ly9leUpoWkdRaU9pSmlkMmRuYVdFdWFXUnZabUZ6ZEM1amIyMGlMQ0poYVdRaU9pSTJOQ0lzSW1odmMzUWlPaUlpTENKcFpDSTZJbVUzTkRRek5qZGpMVEZsTXpBdE5EbGlZaTA1Tm1VeExXVmtPREJpTnpFNE9EYzFNaUlzSW01bGRDSTZJbmR6SWl3aWNHRjBhQ0k2SWk5M2N5OHlOMjFwY1dKcU9tTTFNR1ExWkRGak1UZ3lZalppTUdKbE5qSmlNMlZpWldRM1pEbGpZakJoTHlJc0luQnZjblFpT2lJME5ETWlMQ0p3Y3lJNkl1ZStqdVdidmVlNnYraTNyekV0NTZlNzZJR1U1NVMxTGVhT3FPaU5rQ0lzSW5Sc2N5STZJblJzY3lJc0luUjVjR1VpT2lKdWIyNWxJaXdpZGlJNklqSWlmUT09CnZtZXNzOi8vZXlKaFpHUWlPaUoxY3pFdWFXUnZabUZ6ZEM1amIyMGlMQ0poYVdRaU9pSTJOQ0lzSW1odmMzUWlPaUlpTENKcFpDSTZJbVUzTkRRek5qZGpMVEZsTXpBdE5EbGlZaTA1Tm1VeExXVmtPREJpTnpFNE9EYzFNaUlzSW01bGRDSTZJbmR6SWl3aWNHRjBhQ0k2SWk5M2N5OHlOMjFwY1dKcU9qZ3lNekE1TVRnNFltUTFPREptWTJNME16Um1NMlF5T0RWak9HUTNZMlkzTHlJc0luQnZjblFpT2lJME5ETWlMQ0p3Y3lJNkl1ZStqdVdidmVlNnYraTNyekl0NUxpTjVvNm82STJRSWl3aWRHeHpJam9pZEd4eklpd2lkSGx3WlNJNkltNXZibVVpTENKMklqb2lNaUo5CnZtZXNzOi8vZXlKaFpHUWlPaUoxY3pNdWFXUnZabUZ6ZEM1amIyMGlMQ0poYVdRaU9pSTJOQ0lzSW1odmMzUWlPaUlpTENKcFpDSTZJbVUzTkRRek5qZGpMVEZsTXpBdE5EbGlZaTA1Tm1VeExXVmtPREJpTnpFNE9EYzFNaUlzSW01bGRDSTZJbmR6SWl3aWNHRjBhQ0k2SWk5M2N5OHlOMjFwY1dKcU9tSmxPR1l4TkdaaU9XUTJZMk5pTlRZeE9UZzNaREkxTkRSaU9EYzRNRGN3THlJc0luQnZjblFpT2lJME5ETWlMQ0p3Y3lJNkl1ZStqdVdidmVlNnYraTNyek10NTZlNzZJR1VMZWFPcU9pTmtDSXNJblJzY3lJNkluUnNjeUlzSW5SNWNHVWlPaUp1YjI1bElpd2lkaUk2SWpJaWZRPT0Kdm1lc3M6Ly9leUpoWkdRaU9pSnFjR2RwWVM1cFpHOW1ZWE4wTG1OdmJTSXNJbUZwWkNJNklqWTBJaXdpYUc5emRDSTZJaUlzSW1sa0lqb2laVGMwTkRNMk4yTXRNV1V6TUMwME9XSmlMVGsyWlRFdFpXUTRNR0kzTVRnNE56VXlJaXdpYm1WMElqb2lkM01pTENKd1lYUm9Jam9pTDNkekx6STNiV2x4WW1vNllqZzNaV1pqT1RVNFpqVTBNVE5rTTJWbVkyTTBNekZqWVRoaE1HUXlZbUl2SWl3aWNHOXlkQ0k2SWpRME15SXNJbkJ6SWpvaTVwZWw1cHlzNkxldjU3cS9NUzNvZ1pUbmxMVXQ1bzZvNkkyUUlpd2lkR3h6SWpvaWRHeHpJaXdpZEhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlKOQp2bWVzczovL2V5SmhaR1FpT2lKa1pTNXBaRzltWVhOMExtTnZiU0lzSW1GcFpDSTZJalkwSWl3aWFHOXpkQ0k2SWlJc0ltbGtJam9pWlRjME5ETTJOMk10TVdVek1DMDBPV0ppTFRrMlpURXRaV1E0TUdJM01UZzROelV5SWl3aWJtVjBJam9pZDNNaUxDSndZWFJvSWpvaUwzZHpMekkzYldseFltbzZaVGN4WTJJMVpHRXdOakl6TnpJME16UmtOVFl5TUdJeE9UbGlNVEEyWlRFdklpd2ljRzl5ZENJNklqUTBNeUlzSW5Ceklqb2k1YjYzNVp1OTU3cS82TGV2TVNJc0luUnNjeUk2SW5Sc2N5SXNJblI1Y0dVaU9pSnViMjVsSWl3aWRpSTZJaklpZlE9PQp2bWVzczovL2V5SmhaR1FpT2lKellURXVhV1J2Wm1GemRDNWpiMjBpTENKaGFXUWlPaUkyTkNJc0ltaHZjM1FpT2lJaUxDSnBaQ0k2SW1VM05EUXpOamRqTFRGbE16QXRORGxpWWkwNU5tVXhMV1ZrT0RCaU56RTRPRGMxTWlJc0ltNWxkQ0k2SW5keklpd2ljR0YwYUNJNklpOTNjeTh5TjIxcGNXSnFPamxpWlRSa1ltSXpNekE1TlRnMU5EVTNZbVF5WWpWaE16Y3dOVFk0T1RrMkx5SXNJbkJ2Y25RaU9pSTBORE1pTENKd2N5STZJdVdObCttZG51ZTZ2K2kzcnpFdFoybGhMZWFPcU9pTmtDSXNJblJzY3lJNkluUnNjeUlzSW5SNWNHVWlPaUp1YjI1bElpd2lkaUk2SWpJaWZRPT0Kdm1lc3M6Ly9leUpoWkdRaU9pSnRNUzVwWkc5bVlYTjBMbU52YlNJc0ltRnBaQ0k2SWpZMElpd2lhRzl6ZENJNklpSXNJbWxrSWpvaVpUYzBORE0yTjJNdE1XVXpNQzAwT1dKaUxUazJaVEV0WldRNE1HSTNNVGc0TnpVeUlpd2libVYwSWpvaWQzTWlMQ0p3WVhSb0lqb2lMM2R6THpJM2JXbHhZbW82T0dGak5UTmlaR016T1RjM1pERmtOMkUyT1RZNU5EZzVZVE14TXpVNVl6VXZJaXdpY0c5eWRDSTZJalF6TVRVM0lpd2ljSE1pT2lMa3VLM292YXd4TGVheG4raUxqeTNwcHBubXVLOHQ1bzZvNkkyUUlpd2lkR3h6SWpvaUlpd2lkSGx3WlNJNkltNXZibVVpTENKMklqb2lNaUo5CnZtZXNzOi8vZXlKaFpHUWlPaUpwY0d4ak1pNXBaRzltWVhOMExtTnZiU0lzSW1GcFpDSTZJalkwSWl3aWFHOXpkQ0k2SWlJc0ltbGtJam9pWlRjME5ETTJOMk10TVdVek1DMDBPV0ppTFRrMlpURXRaV1E0TUdJM01UZzROelV5SWl3aWJtVjBJam9pZDNNaUxDSndZWFJvSWpvaUwzZHpMekkzYldseFltbzZNVFEwTXpBM05XUTRNamhsTkRObU5HVmxORGMzTkdKaE5qZGlaV013WmpJdklpd2ljRzl5ZENJNklqUXpNVFV5SWl3aWNITWlPaUpwY0d4ajVMaXQ2TDJzTWkzbHViL2t1Snd0NmFhWjVyaXZJaXdpZEd4eklqb2lkR3h6SWl3aWRIbHdaU0k2SW01dmJtVWlMQ0oySWpvaU1pSjkKdm1lc3M6Ly9leUpoWkdRaU9pSnBjR3hqTXk1cFpHOW1ZWE4wTG1OdmJTSXNJbUZwWkNJNklqWTBJaXdpYUc5emRDSTZJaUlzSW1sa0lqb2laVGMwTkRNMk4yTXRNV1V6TUMwME9XSmlMVGsyWlRFdFpXUTRNR0kzTVRnNE56VXlJaXdpYm1WMElqb2lkM01pTENKd1lYUm9Jam9pTDNkekx6STNiV2x4WW1vNk9HSmlZakl6TWpWa1pUa3pOR0kxWVdRMk9XUm1Oak0yTW1KallUVXlOamd2SWl3aWNHOXlkQ0k2SWpRek1USTFJaXdpY0hNaU9pSnBjR3hqNUxpdDZMMnNNeTNsdWIvbHQ1NHQ2YWFaNXJpdklpd2lkR3h6SWpvaWRHeHpJaXdpZEhsd1pTSTZJbTV2Ym1VaUxDSjJJam9pTWlKOQo=";

        byte[] decode = Base64Decoder.decode(s.getBytes(), 0, s.length());
        System.out.println(new String(decode));
    }

}