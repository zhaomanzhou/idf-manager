<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.im.mapper.FriendUserRefMapper">
    <resultMap id="BaseResultMap" type="FriendUserRef">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="friend_id" jdbcType="BIGINT" property="friendId"/>
        <result column="note" jdbcType="VARCHAR" property="note"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>

        <!-- 0-正常，1-被删除 -->
        <result column="deleted" jdbcType="TINYINT" property="deleted"/>
    </resultMap>

    <resultMap id="UserFriendVo" type="FriendUserBriefVo">
        <id column="friend_id" jdbcType="BIGINT" property="friendId"/>
        <result column="note" jdbcType="VARCHAR" property="note"/>
        <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, user_id, friend_id, note, create_time, update_time, deleted
  </sql>

    <sql id="UserFriendVo_List">
    friend_id, note,avatar_url
  </sql>


    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from im_user_friend
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectFriendVoByFriendId" parameterType="java.lang.Long" resultMap="UserFriendVo">
        SELECT friend.friend_id,  friend.note, user.avatar_url from
        im_user_friend AS friend INNER JOIN im_user AS user
        on friend.friend_id = user.id
        WHERE friend.user_id = #{userId,jdbcType=BIGINT} and friend_id = #{friendId,jdbcType=BIGINT} and friend.deleted = 0
    </select>


    <select id="selectByUserId" parameterType="java.lang.Long" resultMap="UserFriendVo">
        SELECT friend.friend_id,  friend.note, user.avatar_url from
        im_user_friend AS friend INNER JOIN im_user AS user
        on friend.friend_id = user.id
        WHERE friend.user_id = #{userId,jdbcType=BIGINT} and friend.deleted = 0
    </select>



    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from im_user_friend
    where id = #{id,jdbcType=BIGINT}
  </delete>

    <update id="deleteLogicByUserIdFriendId">
    update im_user_friend
    set
      deleted = 1
    where user_id = #{userId,jdbcType=BIGINT} and friend_id = #{friendId,jdbcType=BIGINT}
  </update>

    <insert id="insert">
    insert into im_user_friend (id, user_id, friend_id, 
      note, create_time, update_time, 
      deleted)
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{friendId,jdbcType=BIGINT}, 
      #{note,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{deleted,jdbcType=TINYINT})
  </insert>
    <insert id="insertSelective">
        insert into im_user_friend
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="friendId != null">
                friend_id,
            </if>
            <if test="note != null">
                note,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="friendId != null">
                #{friendId,jdbcType=BIGINT},
            </if>
            <if test="note != null">
                #{note,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                #{deleted,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective">
        update im_user_friend
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="friendId != null">
                friend_id = #{friendId,jdbcType=BIGINT},
            </if>
            <if test="note != null">
                note = #{note,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleted != null">
                deleted = #{deleted,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey">
    update im_user_friend
    set user_id = #{userId,jdbcType=BIGINT},
      friend_id = #{friendId,jdbcType=BIGINT},
      note = #{note,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT}
    where id = #{id,jdbcType=BIGINT}
  </update>



    <!-- Generate time: 2020-08-13 14:07:30 ### -->


    <!-- Your codes goes here!!! -->
    <update id="updateByUserIdFriendId">
    update im_user_friend
    set
      note = #{note,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=BIGINT} and friend_id = #{friendId,jdbcType=BIGINT}
    </update>

    <select id="selectNoteByUserIdFriendId" resultType="java.lang.String">
        select
            note
        from im_user_friend
        where  user_id = #{userId,jdbcType=BIGINT} and friend_id = #{friendId,jdbcType=BIGINT}
    </select>
    <select id="selectFriendDetailVoByUserIdFriendId" resultType="FriendUserDetailDo">
        SELECT user.id,  friend.note, user.avatar_url ,user.username, user.description, user.email, user.phone, user.birthday, user.gender from
        im_user_friend AS friend INNER JOIN im_user AS user
        on friend.friend_id = user.id
        WHERE friend.user_id = #{userId,jdbcType=BIGINT} and friend_id = #{friendId,jdbcType=BIGINT} and friend.deleted = 0

    </select>
<!--    @ApiModelProperty("用户id")-->
<!--    private Long id;-->

<!--    @ApiModelProperty("备注")-->
<!--    private String note;-->

<!--    @ApiModelProperty("用户名")-->
<!--    private String username;-->

<!--    @ApiModelProperty("用户简介")-->
<!--    private String description;-->

<!--    @ApiModelProperty("用户邮箱")-->
<!--    private String email;-->

<!--    @ApiModelProperty("用户电话")-->
<!--    private String phone;-->

<!--    @ApiModelProperty("生日，返回的格式为unix时间戳")-->
<!--    private Long birthday;-->

<!--    @ApiModelProperty("用户头像图片url")-->
<!--    private String avatarUrl;-->

<!--    @ApiModelProperty("性别")-->
<!--    private String gender;-->
</mapper>